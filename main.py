import asyncio
import logging
import sys
from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command


from datetime import datetime
# from gen_message import generate_messange
from client import Client
from payments import Payments
# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ —á—Ç–µ–Ω–∏—è
with open('tg_api.txt', 'r') as file:
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    TOKEN = file.read()

# All handlers should be attached to the Router (or Dispatcher)

dp = Dispatcher()
cl = Client()




@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    greeting = '''
üöÄ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥. üåü

ü§ñ –Ø - —á–∞—Ç –±–æ—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –±–æ–ª—å—à–∏–º–∏ —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏, –∞ –∏–º–µ–Ω–Ω–æ:

‚úÖ **OpenAI ChatGPT –∏ DALL-E**
   - **ChatGPT**: –≠—Ç–æ –º–æ—â–Ω–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å, —Å–ø–æ—Å–æ–±–Ω–∞—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û–Ω–∞ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥, —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.
   - **DALL-E**: –≠—Ç–æ –º–æ–¥–µ–ª—å, —Å–ø–æ—Å–æ–±–Ω–∞—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π. –û–Ω–∞ –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏—è–º.
   - **OpenAI O1**: –≠—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è OpenAI. –û–Ω–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á, —Ç–∞–∫–∏—Ö –∫–∞–∫ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. OpenAI O1 –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ—ë –∏–¥–µ–∞–ª—å–Ω–æ–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏.

‚úÖ **Sber Gigachat –∏ Kandinsky 3.1**
   - **Gigachat**: –≠—Ç–æ —Ä–æ—Å—Å–∏–π—Å–∫–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –°–±–µ—Ä–±–∞–Ω–∫–æ–º. –û–Ω–∞ –æ–±–ª–∞–¥–∞–µ—Ç –≤—ã—Å–æ–∫–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
   - **Kandinsky 3.1**: –≠—Ç–æ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–∞–∑–≤–∞–Ω–Ω–∞—è –≤ —á–µ—Å—Ç—å —Ä—É—Å—Å–∫–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –ö–∞–∑–∏–º–∏—Ä–∞ –ú–∞–ª–µ–≤–∏—á–∞. –û–Ω–∞ —Å–ø–æ—Å–æ–±–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π.

‚úÖ **Google Gemini**
   - **Gemini**: –≠—Ç–æ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –æ—Ç Google, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤ —Å–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á. –û–Ω–∞ —Å–ø–æ—Å–æ–±–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–∞–¥–∞—á, –æ—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.

‚úÖ **Deepseek**
   - **Deepseek**: –≠—Ç–æ –º–æ–¥–µ–ª—å, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ –≥–ª—É–±–æ–∫–æ–º –ø–æ–∏—Å–∫–µ –∏ –∞–Ω–∞–ª–∏–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û–Ω–∞ —Å–ø–æ—Å–æ–±–Ω–∞ –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ü–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ —Ç–µ–∫—Å—Ç–∞, –ø–æ–º–æ–≥–∞—è –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö.

üîç –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:

/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
/buy - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
/gen_image *–≤–∞—à –ø—Ä–æ–º–ø—Ç* - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
/choose_model - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏

–£–¥–∞—á–∏ –∏ —É—Å–ø–µ—Ö–∞ –≤ —Ç–≤–æ–∏—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö! üíªüéâ
'''
    await message.answer(greeting)
    
    
    cl.model.new_user(tgID=message.from_user.id, name=message.from_user.full_name, date_start=datetime.now(), model=5, imageModel=8)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("buy"))
async def cmd_buy(message: Message):
    payment_url = cl.create_check(tgID=message.from_user.id, value='1', description='1')
    if payment_url == '—É –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞':
        await message.answer(f'‚úÖ –£ –≤–∞—Å —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞')
    else:
        buttons = [[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_url)],
                [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="confirm_subscription")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await message.answer(f'–°–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ 1 —Ä—É–±.', reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(lambda c: c.data == 'confirm_subscription')
async def process_callback_answer(callback_query: CallbackQuery):
     tgID = callback_query.from_user.id
     payment_id = cl.model.get_payment_id(tgID, 1)
     payment_status = cl.payments.check_payment(payment_id=payment_id)
     if payment_status == 'succeeded':
        cl.model.update_payment_status(payment_status, payment_id)
        cl.model.add_subscriptions(1, tgID, payment_id)
        await callback_query.answer(f"–æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        await callback_query.message.edit_text(f"–æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", reply_markup=None)

@dp.message(Command("choose_model"))
async def choose_model(message: Message):
    buttons = [[InlineKeyboardButton(text="Sber GigaChat", callback_data="Sber GigaChat")],
        [InlineKeyboardButton(text="OpenAI GPT-4.0", callback_data="OpenAI GPT-4.0")],
        [InlineKeyboardButton(text="OpenAI o1", callback_data="OpenAI o1")],
        [InlineKeyboardButton(text="Google Gemini", callback_data="Google Gemini")],
        [InlineKeyboardButton(text="DALL-E 3.0", callback_data="DALL-E 3.0")],
        [InlineKeyboardButton(text="Kandinsky", callback_data="Kandinsky")],
        [InlineKeyboardButton(text="dall-e-2", callback_data="dall-e-2")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å', reply_markup=keyboard)

@dp.callback_query(lambda c: c.data in ["Sber GigaChat", "OpenAI GPT-4.0", "OpenAI o1", "Google Gemini", "Deepseek",  "DALL-E 3.0", "Kandinsky", "dall-e-2"])
async def process_callback(callback_query: CallbackQuery):
    tgID = callback_query.from_user.id
    model = callback_query.data

    await callback_query.answer(f'–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}')
    await callback_query.message.edit_text(f'–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}', reply_markup=None)

    models = {
    "OpenAI GPT-4.0": {
        "id": 1,
        "column": "model"
    },
    "OpenAI o1": {
        "id": 2,
        "column": "model"
    },
    "Google Gemini": {
        "id": 3,
        "column": "model"
    },
    "Deepseek": {
        "id": 4,
        "column": "model"
    },
    "Sber GigaChat": {
        "id": 5,
        "column": "model"
    },
    "DALL-E 3.0": {
        "id": 6,
        "column": "imageModel"
    },
    "Kandinsky": {
        "id": 7,
        "column": "imageModel"
    },
    "dall-e-2": {
        "id": 8,
        "column": "imageModel"
    }
}
        
    cl.model.change_model(tgID=tgID, model=models[model]['id'], column=models[model]['column'])


@dp.message(Command("gen_image"))
async def img(message: Message):
    amount = '5'
    tgID = message.from_user.id
    prompt = message.text
    paymentID, payment_url = cl.create_check(tgID=tgID, value=amount, description='2')
    cl.model.add_image(tgID, paymentID, prompt)
    buttons = [
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_url)],
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_image:{paymentID}")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)
    await message.answer(f'–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —Ä—É–±–ª–µ–π', reply_markup=keyboard)
    
    # # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(lambda c: c.data.startswith('confirm_image:'))
async def process_callback_answer(callback_query: CallbackQuery):
    tgID = callback_query.from_user.id
    _, paymentID = callback_query.data.split(':')
    payment_status = cl.payments.check_payment(payment_id=paymentID)
    if payment_status == 'succeeded':
        cl.model.update_payment_status(payment_status, paymentID)
        prompt = cl.model.get_prompt_by_payment_id(paymentID)
        image_url = cl.take_image(tgID, prompt)
 
        await callback_query.message.reply(image_url)
        await callback_query.answer(f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        await callback_query.message.edit_text(f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", reply_markup=None)
        cl.model.update_image_url(paymentID, image_url)
    else:
        await callback_query.answer(f"–û–ø–ª–∞—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_message = '''
/buy - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
/gen_image - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ü–û–ö–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢
/choose_model - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ - @zdarova_69
        '''
    await message.reply(help_message)


@dp.message()
async def message_handler(message: Message) -> None:
    """
    Handler will forward receive a message back to the sender

    By default, message handler will handle all message types (like a text, photo, sticker etc.)
    """
    # try:
        # Send a copy of the received message
    print(message.text)
    answer = cl.generate_answer(tgID=message.from_user.id ,prompt=message.text)
    await message.reply(answer)
    # except TypeError:
    #     # But not all the types is supported to be copied so need to handle it
    #     await message.answer("Nice try!")


async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())