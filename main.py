import asyncio
import logging
import sys
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile, ContentType
from aiogram.types.web_app_info import WebAppInfo

from client import Client
from api import TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
dp = Dispatcher()
cl = Client()


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    greeting = '''
–í–∞—à –ª–∏—á–Ω—ã–π –º—É–ª—å—Ç–∏—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ª—É—á—à–∏–º —è–∑—ã–∫–æ–≤—ã–º –º–æ–¥–µ–ª—è–º –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞!

üìå –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:

–û–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ—â—å ChatGPT, DeepSeek, Gemini –∏ GigaChat –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π, –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤, –æ–±—É—á–µ–Ω–∏—è –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ.

–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é DALL-E –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.

–ú—É–ª—å—Ç–∏–º–æ–¥–µ–ª—å–Ω–æ—Å—Ç—å: –í—ã–±–∏—Ä–∞–π—Ç–µ, –∫–∞–∫–∞—è –º–æ–¥–µ–ª—å –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏, –∏–ª–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ò–ò.

–£–¥–æ–±—Å—Ç–≤–æ: –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä—è–º–æ –≤ Telegram.

‚ú® –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –±–æ—Ç?

–ú–æ—â—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö AI: –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏ ‚Äî –≤—Å—ë –≤ –æ–¥–Ω–æ–º –±–æ—Ç–µ.

–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞, –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π.

üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∑–∞–ø—Ä–æ—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–µ–∫—Å—Ç—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å AI!

üëâ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é –±—É–¥—É—â–µ–≥–æ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!

/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
/subscription - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
/gen_image *–≤–∞—à –ø—Ä–æ–º–ø—Ç* - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
/choose_model - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
/clear_context - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç

–£–¥–∞—á–∏ –∏ —É—Å–ø–µ—Ö–∞ –≤ —Ç–≤–æ–∏—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö! üíªüéâ
'''
    await message.answer(greeting)
    await cl.model.new_user(tgID=message.from_user.id, name=message.from_user.full_name, date_start=datetime.now(), model=5, imageModel=8)


@dp.message(Command("subscription"))
async def cmd_buy(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription
    """
    buttons = [
        [InlineKeyboardButton(text="–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (7 –¥–Ω–µ–π)", callback_data="limited")],
        [InlineKeyboardButton(text="–ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="unlimited")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É', reply_markup=keyboard)


@dp.callback_query(lambda c: c.data in ["limited", "unlimited"])
async def process_callback_answer(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    if callback_query.data == 'unlimited':
        payment_url = await cl.create_check(tgID=callback_query.from_user.id, value='1', description='1')
        if payment_url == '—É –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞':
            await callback_query.answer('‚úÖ –£ –≤–∞—Å —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞')
            await callback_query.message.edit_text('‚úÖ –£ –≤–∞—Å —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞')
        else:
            buttons = [
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", web_app=WebAppInfo(url=payment_url))],
                [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="confirm_subscription")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)
            await callback_query.answer('–°–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ 1 —Ä—É–±.', reply_markup=keyboard)
            await callback_query.message.edit_text('–°–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ 1 —Ä—É–±.', reply_markup=keyboard)
    else:
        has_lim_sub = await cl.model.select_lim(callback_query.from_user.id, 'hasLimitedSubscription')
        if has_lim_sub == 1:
            end_date = datetime.now() + timedelta(days=7)
            await cl.model.add_subscriptions(2, callback_query.from_user.id, end_Date=end_date)
            await callback_query.answer('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞')
            await callback_query.message.edit_text('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞')
            await cl.model.update_lim(callback_query.from_user.id, 'hasLimitedSubscription')
        else:
            await callback_query.message.edit_text('–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É')


@dp.callback_query(lambda c: c.data == 'confirm_subscription')
async def process_callback_answer(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    """
    tgID = callback_query.from_user.id
    payment_id = await cl.model.get_payment_id(tgID, 1)
    payment_status = await cl.payments.check_payment_status(payment_id=payment_id)
    if payment_status == 'succeeded':
        await cl.model.update_payment_status(payment_status, payment_id)
        await cl.model.add_subscriptions(1, tgID, payment_id)
        await callback_query.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        await callback_query.message.edit_text("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", reply_markup=None)


@dp.message(Command("choose_model"))
async def choose_model(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /choose_model
    """
    has_subscription = await cl.model.check_user_subscription(message.from_user.id)
    if (1,) in has_subscription:
        buttons = [
            [InlineKeyboardButton(text="Sber GigaChat", callback_data="Sber GigaChat")],
            [InlineKeyboardButton(text="OpenAI GPT-4.0", callback_data="OpenAI GPT-4.0")],
            [InlineKeyboardButton(text="OpenAI o1", callback_data="OpenAI o1")],
            [InlineKeyboardButton(text="Google Gemini", callback_data="Google Gemini")],
            [InlineKeyboardButton(text="Deepseek", callback_data="Deepseek")],
            [InlineKeyboardButton(text="Deepseek R1", callback_data="Deepseek R1")],
            [InlineKeyboardButton(text="Claude", callback_data="Claude")],
            [InlineKeyboardButton(text="Perplexity", callback_data="Perplexity")],
            [InlineKeyboardButton(text="DALL-E 3.0", callback_data="DALL-E 3.0")],
            [InlineKeyboardButton(text="Sber GigaChat –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="Sber GigaChat –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")],
            [InlineKeyboardButton(text="dall-e-2", callback_data="dall-e-2")],
            [InlineKeyboardButton(text="tts-1", callback_data="tts-1")],
            [InlineKeyboardButton(text="tts-1-hd", callback_data="tts-1-hd")]
        ]
    else:
        buttons = [
            [InlineKeyboardButton(text="Sber GigaChat", callback_data="Sber GigaChat")],
            [InlineKeyboardButton(text="Deepseek", callback_data="Deepseek")],
            [InlineKeyboardButton(text="DALL-E 3.0", callback_data="DALL-E 3.0")],
            [InlineKeyboardButton(text="dall-e-2", callback_data="dall-e-2")]
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å', reply_markup=keyboard)


@dp.callback_query(lambda c: c.data in ["Sber GigaChat", "OpenAI GPT-4.0", "OpenAI o1", "Google Gemini", "Deepseek", "Deepseek R1", 'Perplexity',  "Claude", "DALL-E 3.0", "Sber GigaChat –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "dall-e-2", "tts-1", "tts-1-hd"])
async def process_callback(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    """
    tgID = callback_query.from_user.id
    model = callback_query.data

    await callback_query.answer(f'–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}')
    await callback_query.message.edit_text(f'–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}', reply_markup=None)

    models = {
        "OpenAI GPT-4.0": {"id": 1, "column": "model"},
        "OpenAI o1": {"id": 2, "column": "model"},
        "Google Gemini": {"id": 3, "column": "model"},
        "Deepseek": {"id": 4, "column": "model"},
        "Sber GigaChat": {"id": 5, "column": "model"},
        "Claude": {"id": 11, "column": "model"},
        "Deepseek R1": {"id": 12, "column": "model"},
        "Perplexity": {"id": 13, "column": "model"},
        "DALL-E 3.0": {"id": 6, "column": "imageModel"},
        "Sber GigaChat –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π": {"id": 7, "column": "imageModel"},
        "dall-e-2": {"id": 8, "column": "imageModel"},
        "tts-1": {"id": 9, "column": "audioModel"},
        "tts-1-hd": {"id": 10, "column": "audioModel"}
    }

    await cl.model.change_model(tgID=tgID, model=models[model]['id'], column=models[model]['column'])


@dp.message(Command("gen_image"))
async def img(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gen_image
    """
    tgID = message.from_user.id
    amount = str(await cl.model.select_model_price(tgID))
    model_number = await cl.model.get_model(tgID, column='imageModel')
    prompt = message.text

    if prompt == '/gen_image':
        await message.answer('üé® –ß—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /gen_image –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    elif amount == '0':
        buttons = [
            [InlineKeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"free_gen:")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)
        await message.answer(f'üé® –í–∞—à –ø—Ä–æ–º–ø—Ç: {prompt}', reply_markup=keyboard)
    else:
        has_free_pic = await cl.model.select_lim(tgID, 'hasFreePicture')
        paymentID, payment_url = await cl.create_check(tgID=tgID, value=amount, description='2')

        buttons = [
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", web_app=WebAppInfo(url=payment_url))],
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_image:{paymentID}")]
        ]

        await message.answer(f'üé® –í–∞—à –ø—Ä–æ–º–ø—Ç: {prompt}')

        if has_free_pic >= 1:
            buttons.append([InlineKeyboardButton(text="üÜì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data=f"use_free_image:{paymentID}")])

        await cl.model.add_image(tgID, paymentID, prompt, model_number)

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)
        await message.answer(f"""üéÅ –£ –≤–∞—Å –µ—Å—Ç—å {has_free_pic} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.
üí∏ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —Ä—É–±–ª–µ–π""", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith(('confirm_image:', 'use_free_image:', "free_gen:")))
async def process_callback_answer(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    tgID = callback_query.from_user.id
    action, paymentID= callback_query.data.split(':')

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É
    await callback_query.answer()

    if action == "confirm_image":
        payment_status = await cl.payments.check_payment_status(payment_id=paymentID)
        if payment_status == 'succeeded':
            await callback_query.bot.send_chat_action(callback_query.message.chat.id, 'upload_photo')
            await callback_query.message.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            await cl.model.update_payment_status(payment_status, paymentID)
            prompt, model = await cl.model.get_prompt_model_by_payment_id(paymentID)
            image_url = await cl.take_image(tgID, prompt, model)
            content = FSInputFile('content.jpg')
            await callback_query.message.answer_photo(photo=content)
            await callback_query.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", reply_markup=None)
            await cl.model.update_image_url(paymentID, image_url)
        else:
            await callback_query.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

    else:
        if action == "use_free_image":
            has_free_pic = await cl.model.select_lim(tgID, 'hasFreePicture')
            if has_free_pic == 0:
                await callback_query.message.answer("üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞")
                await cl.model.update_lim(tgID, 'hasFreePicture', has_free_pic - 1)
                return
        await callback_query.bot.send_chat_action(callback_query.message.chat.id, 'upload_photo')
        await callback_query.message.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        prompt, model = await cl.model.get_prompt_model_by_payment_id(paymentID)
        image_url = await cl.take_image(tgID, prompt, model)
        content = FSInputFile('files/images/output/content.jpg')
        await callback_query.message.answer_photo(photo=content)
        await callback_query.message.edit_text("üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞", reply_markup=None)
        await cl.model.update_image_url(paymentID, image_url)


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_message = '''
/subscription - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
/gen_image - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ü–û–ö–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢
/choose_model - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
/clear_context - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ - @zdarova_69
    '''
    await message.reply(help_message)


@dp.message(Command("clear_context"))
async def cmd_clear_context(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_context
    """
    await cl.model.update_context_clear(message.from_user.id)
    await message.reply('–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω! ‚úÖ')


@dp.message(F.content_type == ContentType.PHOTO)
async def photo_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    """
    image_path = "files/images/input/input.jpg"
    await message.bot.send_chat_action(message.chat.id, 'typing')
    prompt = message.caption
    await message.bot.download(file=message.photo[-1].file_id, destination=image_path)
    answer = await cl.answer_photo(tgID=message.from_user.id, photo=image_path, prompt=prompt)
    await message.reply(answer)


@dp.message()
async def message_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await message.bot.send_chat_action(message.chat.id, 'typing')
    answer = await cl.generate_answer(tgID=message.from_user.id, prompt=message.text)
    await message.reply(answer)


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())